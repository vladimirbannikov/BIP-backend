openapi: 3.0.3
info:
  title: Сервис для онлайн-тестов
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
paths:
  /register:
    post:
      summary: Register user
      tags:
        - auth
      description: Register user and get qr code
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '200':
          description: successful operation
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/RegisterInputResp'
        '400':
          description: Invalid input or not unique login/email
          
  /login:
    post:
      summary: Login user
      tags:
        - auth
      description: Login user and get jwt token
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResp'
        '400':
          description: Invalid input
        '401':
          description: Wrong username or password
          
  /user2fa:
    post:
      summary: Check 2fa code
      tags:
        - auth
      description: Check user 2fa code
      operationId: user2fa
      parameters:
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User2faReq'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid input
        '401':
          description: Wrong code     
          
  /logout:
    delete:
      summary: Logout
      tags:
        - auth
      description: Logout
      operationId: logout
      parameters:
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
        '401':
          description: Wrong creds
          
  /userMy:
    get:
      summary: Get current user profile
      tags:
        - user
      description: Get current user profile
      operationId: userMyGet
      parameters:
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileMy'
        '404':
          description: User not found
        '401':
          description: Not authorized
          
    put:
      summary: Update current user profile
      tags:
        - user
      description: Update current user profile
      operationId: userMyPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInput'
      parameters:
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
        '401':
          description: Not authorized
        '400':
          description: Unique violation or invalid input
          
  /user/{login}:
    get:
      summary: Get user profile
      tags:
        - user
      description: Get  user profile
      operationId: user_login
      parameters:
        - name: login
          in: path
          description: 'Login of user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
        '400':
          description: Invalid anything
          
  /tests/{id}/commit:
    post:
      summary: Commit test and get result
      tags:
        - tests
      operationId: testCommit
      parameters:
        - name: id
          in: path
          description: 'id of test'
          required: true
          schema:
            type: string
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitTestReq'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitTestResp'
        '404':
          description: User not found
        '400':
          description: Invalid anything
        '401':
          description: Not authorized
          
  /tests/{id}:
    get:
      summary: Get full test for user
      tags:
        - tests
      operationId: testFullGet
      parameters:
        - name: id
          in: path
          description: 'id of test'
          required: true
          schema:
            type: string
        - in: header
          name: Auth
          schema:
            type: string
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullTest'
        '404':
          description: User not found
        '400':
          description: Invalid anything
        '401':
          description: Not authorized
          
  /rating:
    get:
      summary: Get rating
      tags:
        - user
      description: Getusers rating
      operationId: user_rating_get
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRating'
        '400':
          description: Invalid
          
  /tests:
    get:
      summary: Get tests
      tags:
        - tests
      description: Get tests
      operationId: getTests
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestsSimple'
        '400':
          description: Invalid anything
          
          
components:
  schemas:
    RegisterInput:
      type: object
      properties:
        login:
          type: string
          example: user
        email:
          type: string
          example: email@gmail.com
        password:
          type: string
          example: password
          
    RegisterInputResp:
      description: png qr code
      type: string
          
    LoginInput:
      type: object
      properties:
        login:
          type: string
          example: user
        password:
          type: string
          example: password
    
    LoginResp:
      type: object
      properties:
        access_token:
          type: string
          example: token

    User2faReq:
      type: object
      properties:
        code:
          type: integer
          example: 123456

    UserProfileMy:
      type: object
      properties:
        login:
          type: string
          example: user
        email:
          type: string
          example: email@gmail
        total_score:
          type: integer
          example: 5
        tests_count:
          type: integer
          example: 1
        global_rating:
          type: integer
          example: 2
        avatar:
          type: string
          example: qwuetyqwe

    UserProfile:
      type: object
      properties:
        login:
          type: string
          example: user
        total_score:
          type: integer
          example: 5
        tests_count:
          type: integer
          example: 1
        global_rating:
          type: integer
          example: 2
        avatar:
          type: string
          example: qwuetyqwe
          
    UpdateUserInput:
      type: object
      properties:
        email:
          type: string
          example: email@gmail.com
        password:
          type: string
          example: password
         
         
    UsersRating:
      type: object
      properties:
        rating:
          type: array
          items: 
            $ref: '#/components/schemas/UsersRatingUnit'
          
    UsersRatingUnit:
      type: object
      properties:
        login:
          type: string
          example: user
        place:
          type: integer
          example: 1
        score:
          type: integer
          example: 5
          
    TestsSimple:
      type: object
      properties:
        tests:
          type: array
          items: 
            $ref: '#/components/schemas/SimpleTest'
          
    SimpleTest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: simple test
        diff_level:
          type: integer
          example: 1
        description:
          type: string
          example: desc
        category:
          type: string
          example: anime
        picture:
          type: string
          example: asdsdads


    CommitTestReq:
      type: object
      properties:
        user_answers:
          type: array
          items: 
            $ref: '#/components/schemas/CommitTestReqAns'
            
    CommitTestReqAns:
      type: object
      properties:
        question_id:
          type: integer
          example: 1
        answer_id:
          type: integer
          example: 2
          
    CommitTestResp:
      type: object
      properties:
        user_score:
          type: integer
          example: 1
        total:
          type: integer
          example: 2
 
 
    FullTest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: simple test
        diff_level:
          type: integer
          example: 1
        description:
          type: string
          example: desc
        category:
          type: string
          example: anime
        questions:
          type: array
          items: 
            $ref: '#/components/schemas/FullTestQuestion'
          
    FullTestQuestion:
      type: object
      properties:
        id:
          type: integer
          example: 1
        question:
          type: string
          example: question
        isSong:
          type: boolean
          example: false
        song:
          type: string
          example: asdasdasdasd
        answers:
          type: array
          items: 
            $ref: '#/components/schemas/FullTestAnswer'
            
    FullTestAnswer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        answer:
          type: string
          example: answer
 
 
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'